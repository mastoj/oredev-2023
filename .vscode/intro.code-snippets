{
	// Place your hellooredev2022 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and \\${1:label}, \\${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Resource group array": {
		"scope": "typescript",
		"prefix": "pi1",
		"body": [
"const rgs = [...Array(10)].map((_, i) => {",
"\treturn new resources.ResourceGroup('resourceGroup' + i);",
"});\n",
"export const outputs = pulumi.all(rgs.map((rg) => rg.name));"
		]
	},
	"Resource group array with name": {
		"scope": "typescript",
		"prefix": "pi2",
		"body": [
"[...Array(10)].map((_, i) => {",
"\tconst rgName = 'resourceGroup' + i;",
"\tconst resourceGroup = new resources.ResourceGroup(rgName, { resourceGroupName: rgName });",
"});"
		]
	},
	"Simple config value": {
		"scope": "typescript",
		"prefix": "pi3",
		"body": [
			"const config = new pulumi.Config();"
			"const rgPrefix = config.require('rgPrefix');"
		]
	},
	"Create component": {
		"scope": "typescript",
		"prefix": "pi4",
		"body": [
"import * as pulumi from '@pulumi/pulumi';",
"import { ComponentResource, Output } from '@pulumi/pulumi';",
"",
"export type ResourceGroupWithSPArgs = {",
"\tsubscriptionId: string;",
"\tlocation: string;",
"}",
"",
"export class ResourceGroupWithSP extends ComponentResource {",
"",
"\tconstructor(name: string, args: ResourceGroupWithSPArgs, opts?: pulumi.ComponentResourceOptions) {",
"\t\tsuper(`2mas:components:ResourceGroupWithSP`, name);",
"\t}",
"}",
		]
	},
	"Use component": {
		"scope": "typescript",
		"prefix": "pi5",
		"body": [
"import { Provider as AzureProvider } from '@pulumi/azure-native';",
"import { ResourceGroupWithSP } from './ResourceGroupWithSP';",
"",
"const tenantId = process.env.ARM_TENANT_ID!;",
"const subscriptionId = process.env.ARM_SUBSCRIPTION_ID!;",
"const location = 'WestEurope';",
"",
"const azureProvider = new AzureProvider('azure-provider');",
"",
"const rg = new ResourceGroupWithSP('rg-oredev', ",
"\t{ subscriptionId: subscriptionId, location: location },",
"\t{ providers: { 'azure-native': azureProvider } });",
		]
	},
	"Create full component": {
		"scope": "typescript",
		"prefix": "pi6",
		"body": [
"import * as pulumi from '@pulumi/pulumi';",
"import * as resources from '@pulumi/azure-native/resources';",
"import { ComponentResource, Output, ProviderResource } from '@pulumi/pulumi';",
"import { Application, ServicePrincipal, ServicePrincipalPassword } from '@pulumi/azuread';",
"import { RandomUuid } from '@pulumi/random';",
"import { RoleAssignment } from '@pulumi/azure-native/authorization';",
"",
"export type ResourceGroupWithSPArgs = {",
"\tsubscriptionId: string;",
"\tlocation: string;",
"}",
"",
"export class ResourceGroupWithSP extends ComponentResource {",
"\tresourceGroupName: Output<string>;",
"\tclientId: Output<string>;",
"\tclientSecret: Output<string>;",
"",
"\tconstructor(name: string, args: ResourceGroupWithSPArgs, opts?: pulumi.ComponentResourceOptions) {",
"\t\tsuper(`2mas:components:ResourceGroupWithSP`, name);",
"\t\tconst azureOptions = { provider: (opts?.providers as Record<string, ProviderResource>)['azure-native'], parent: this };",
"\t\tconst azureAdOptions = { provider: (opts?.providers as Record<string, ProviderResource>)['azuread'], parent: this };",
"\t\t",
"\t\tconst resourceGroup = new resources.ResourceGroup('resourceGroup', {",
"\t\t\tresourceGroupName: name,",
"\t\t\tlocation: args.location,",
"\t\t}, azureOptions);",
"\t\t",
"\t\tconst adApp = new Application(",
"\t\t\t`\\${name}-app`,",
"\t\t\t{ displayName: `\\${name}-app` },",
"\t\t\tazureAdOptions",
"\t\t);",
"",
"\t\tconst adSp = new ServicePrincipal(",
"\t\t\t`\\${name}-sp`,",
"\t\t\t{ applicationId: adApp.applicationId },",
"\t\t\tazureAdOptions",
"\t\t);",
"\t\tconst adSpPassword = new ServicePrincipalPassword(",
"\t\t\t`\\${name}-sp-password`,",
"\t\t\t{",
"\t\t\t\tservicePrincipalId: adSp.id,",
"\t\t\t},",
"\t\t\tazureAdOptions",
"\t\t);",
"",
"\t\tconst subscriptionId = args.subscriptionId;",
"\t\tconst resourceGroupNameUrn = resourceGroup.name.apply((name: string) => {",
"\t\t\treturn `/subscriptions/\\${subscriptionId}/resourcegroups/\\${name}`;",
"\t\t});",
"",
"\t\tconst contributorRoleDefinitionId = `/subscriptions/\\${subscriptionId}/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c`;",
"\t\tconst spRoleAssignmentId = new RandomUuid(",
"\t\t\t`\\${name}-spRoleAssignmentId`,",
"\t\t\tundefined,",
"\t\t\t{ parent: this }",
"\t\t);",
"\t\tconst spRoleAssignment = new RoleAssignment(",
"\t\t\t`\\${name}-spRoleAssignment`,",
"\t\t\t{",
"\t\t\t\tprincipalType: 'ServicePrincipal',",
"\t\t\t\troleAssignmentName: spRoleAssignmentId.result,",
"\t\t\t\tprincipalId: adSp.id,",
"\t\t\t\troleDefinitionId: contributorRoleDefinitionId,",
"\t\t\t\tscope: resourceGroupNameUrn,",
"\t\t\t},",
"\t\t\t{ ...azureOptions, dependsOn: [adSp] }",
"\t\t);",
"\t\tthis.resourceGroupName = resourceGroup.name;",
"\t\tthis.clientId = adSp.applicationId;",
"\t\tthis.clientSecret = pulumi.secret(adSpPassword.value);",
"\t}",
"}",
					]
	},
	"Use more advanced component": {
		"scope": "typescript",
		"prefix": "pi7",
		"body": [
"import * as pulumi from '@pulumi/pulumi';",
"import { Provider as AzureProvider } from '@pulumi/azure-native';",
"import { Provider as AzureAdProvider } from '@pulumi/azuread';",
"import { ResourceGroupWithSP } from './ResourceGroupWithSP';",
"",
"const tenantId = process.env.ARM_TENANT_ID!;",
"const subscriptionId = process.env.ARM_SUBSCRIPTION_ID!;",
"const location = 'WestEurope';",
"const azureProvider = new AzureProvider('azure-provider');",
"const azureAdProvider = new AzureAdProvider('azure-ad-provider', {metadataHost: ''});",
"",
"",
"const resourceGroupNames = ['hello-oredev'];",
"export const resourceGroups = resourceGroupNames.map((name) => {",
"\tconst rg = new ResourceGroupWithSP(name, ",
"\t\t{ subscriptionId: subscriptionId, location: location },",
"\t\t{ providers: { 'azure-native': azureProvider, azuread: azureAdProvider } });",
"\treturn {",
"\t\tname: name,",
"\t\tclientId: rg.clientId,",
"\t\tclientSecret: rg.clientSecret,",
"\t\tsubscriptionId: subscriptionId,",
"\t\ttenantId: tenantId",
"\t}}).reduce((acc, cur) => ({...acc, [cur.name]: cur}), {});",
		]
	},
	"Create web site": {
		"scope": "typescript",
		"prefix": "pi8",
		"body": [
"import { Kind, SkuName, StorageAccount, StorageAccountStaticWebsite } from '@pulumi/azure-native/storage';",
"import { Record, RecordType, RecordTypes } from '@pulumi/dnsimple';",
"import { ComponentResource, ComponentResourceOptions, Input, Output, ProviderResource } from '@pulumi/pulumi';",
"import * as storage from '@pulumi/azure-native/storage';",
"import { FileAsset } from '@pulumi/pulumi/asset';",
"",
"export interface DnsArgs {",
"\trecordType: Input<RecordType>;",
"\thostOrIp: Input<string>;",
"}",
"",
"export interface WebsiteArgs {",
"\tresourceGroupName: Input<string>,",
"\tdnsArgs: DnsArgs",
"}",
"",
"export class Website extends ComponentResource {",
"\tname: string;",
"\tstaticEndpoint?: Output<string>;",
"",
"\tconstructor(name: string, args: WebsiteArgs, opts?: ComponentResourceOptions) {",
"\t\tsuper(`2mas:components:Website`, name);",
"\t\tconst providers = (opts?.providers! as globalThis.Record<string, ProviderResource>);",
"\t\tconst azureOptions = { parent: this, provider: providers['azure-native'] };",
"\t\tconst dnsimpleOptions = { parent: this };",
"\t\tconst storageAccountName = `2mas\\${name.replace(/-/g, '')}`;",
"\t\tconst staticWebsiteHostName = `\\${storageAccountName}.z6.web.core.windows.net`;",
"",
"\t\tconst dnsRecord = new Record(`\\${name}-dns`, {",
"\t\t\tdomain: '2mas.xyz',",
"\t\t\tname: name,",
"\t\t\tttl: '60',",
"\t\t\ttype: RecordTypes.CNAME,",
"\t\t\tvalue: staticWebsiteHostName,",
"\t\t}, dnsimpleOptions);",
"",
"\t\tconst delayedCustomDomainName = dnsRecord.name.apply<string>(async (name: string) => {",
"\t\t\treturn await new Promise(resolve => {",
"\t\t\t\tsetTimeout(() => resolve(`\\${name}.2mas.xyz`), 10000);",
"\t\t\t});",
"\t\t})",
"\t\tconst storageAccount = new StorageAccount(`\\${name}-storageaccount`, {",
"\t\t\tenableHttpsTrafficOnly: true,",
"\t\t\taccountName: storageAccountName,",
"\t\t\tkind: Kind.StorageV2,",
"\t\t\tresourceGroupName: args.resourceGroupName,",
"\t\t\tsku: {",
"\t\t\t\tname: SkuName.Standard_LRS,",
"\t\t\t},",
"\t\t\tcustomDomain: {",
"\t\t\t\tname: delayedCustomDomainName,",
"\t\t\t},",
"\t\t}, {...azureOptions, dependsOn: [dnsRecord]});",
"",
"\t\t// Enable static website support",
"\t\tconst staticWebsite = new StorageAccountStaticWebsite(`\\${name}-staticWebsite`, {",
"\t\t\taccountName: storageAccount.name,",
"\t\t\tresourceGroupName: args.resourceGroupName,",
"\t\t\tindexDocument: 'index.html',",
"\t\t\terror404Document: 'index.html',",
"\t\t}, azureOptions);",
"",
"\t\t// Upload files",
"\t\tconst indexFile = 'index.html';",
"\t\tconst files = new storage.Blob(`\\${name}-\\${indexFile}`, {",
"\t\t\tblobName: indexFile,",
"\t\t\tresourceGroupName: args.resourceGroupName,",
"\t\t\taccountName: storageAccount.name,",
"\t\t\tcontainerName: staticWebsite.containerName,",
"\t\t\tsource: new FileAsset(`../../\\${indexFile}`),",
"\t\t\tcontentType: 'text/html',",
"\t\t}, azureOptions);",
"",
"\t\tthis.name = name;",
"\t\tthis.staticEndpoint = storageAccount.primaryEndpoints.web;",
"\t}",
"}",
					]
	}, 
	"Use website component": {
		"scope": "typescript",
		"prefix": "pi9",
		"body": [
"import { getStack, Output, StackReference } from '@pulumi/pulumi';",
"import { Provider } from '@pulumi/azure-native';",
"import { Website } from './Website';",
"import { RecordTypes } from '@pulumi/dnsimple';",
"",
"interface Environment {",
"\tname: string;",
"\tclientId: string;",
"\tclientSecret: string;",
"\tsubscriptionId: string;",
"\ttenantId: string;",
"}",
"",
"const stack = getStack();",
"const name = 'hello-oredev';",
"const fullName = `\\${name}-\\${stack}`;",
"const customHostname = `\\${fullName}.2mas.xyz`",
"",
"",
"const getEnvironment = () => {",
"\tconst environmentStack = new StackReference('tomasja/oredev.environments/dev');",
"\tconst environment = environmentStack",
"\t\t.requireOutput('resourceGroups')",
"\t\t.apply((json: any) => json[name] as Environment);",
"\treturn environment;",
"}",
"",
"const getAzureProvider = (environment: Output<Environment>) => {",
"\tconst azureProvider = new Provider('azure-provider', {",
"\t\tsubscriptionId: environment.subscriptionId,",
"\t\ttenantId: environment.tenantId,",
"\t\tclientId: environment.clientId,",
"\t\tclientSecret: environment.clientSecret",
"\t});",
"\treturn azureProvider;",
"}",
"",
"const environment = getEnvironment();",
"const azureProvider = getAzureProvider(environment);",
"const website = new Website(fullName, ",
"\t{ ",
"\t\tresourceGroupName: environment.name,",
"\t\tdnsArgs: {",
"\t\t\trecordType: RecordTypes.A,",
"\t\t\thostOrIp: customHostname",
"\t\t}",
"\t},",
"\t{ providers: { 'azure-native': azureProvider } });",
"export const hostname = website.staticEndpoint?.apply((endpoint: any) => new URL(endpoint).hostname);",
"",
"export const siteUrl = `https://\\${customHostname}`;",
"export const staticEndpoint = website.staticEndpoint;",
		]
				},
				"Create multiple sites": {
					"scope": "typescript",
					"prefix": "pi10",
					"body": [
"const sites = [fullName, 'thank-you'].map(name => {",
"\tconst hostName = `\\${name}.2mas.xyz`",
"",
"\tconst website = new Website(name, ",
"\t\t{ ",
"\t\t\tresourceGroupName: environment.name,",
"\t\t\tdnsArgs: {",
"\t\t\t\trecordType: RecordTypes.A,",
"\t\t\t\thostOrIp: hostName",
"\t\t\t}",
"\t\t},",
"\t\t{ providers: { 'azure-native': azureProvider } });",
"\treturn {",
"\t\tsiteUrl: `https://\\${hostName}`",
"\t};",
"})",
"",
"export const siteUrls = sites;",
											]
				}
}